vrrp_script chk_nginx {
    script "/etc/keepalived/check_nginx_alive.sh" # 脚本存放位置
    interval 2 # 脚本执行间隔，单位秒
    weight -5 # 脚本结果导致的优先级变更：5表示优先级+5；-5则表示优先级-5
    fall 3 # 检测连续 3 次失败才算确定是真失败。会用weight减少优先级（1-255之间）
    rise 2 # 检测 2 次成功就算成功。但不修改优先级
}

vrrp_instance VI_1 {
    state ${ROLE1} # 状态，主节点为MASTER，备份节点为BACKUP
    interface ${NET_DEV} # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口
    virtual_router_id 66 # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址
    nopreempt # 非抢占模式，当主down时，备接管，主恢复，不自动接管
    priority ${PRIORITY1} # 节点优先级，值范围0～254，MASTER要比BACKUP高
    advert_int 1 # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒
    # 设置验证信息，两个节点必须一致
    authentication {
        auth_type PASS
        auth_pass udcnbRHD6bbe9Lph
    }
    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个
    virtual_ipaddress {
        ${IP_MASK1}
    }
    # nginx存活状态检测脚本
    track_script {
        chk_nginx
    }
    # Keepalived进入MASTER状态执行脚本
    notify_master /etc/keepalived/to_master.sh
    # Keepalived进入BACKUP状态执行脚本
    notify_backup /etc/keepalived/to_backup.sh
    # Keepalived进入FAULT状态执行脚本
    notify_fault /etc/keepalived/to_fault.sh
    smtp_alert
}

vrrp_instance VI_2 {
    state ${ROLE2} # 状态，主节点为MASTER，备份节点为BACKUP
    interface ${NET_DEV} # 绑定VIP的网络接口，通过ifconfig查看自己的网络接口
    virtual_router_id 51 # 虚拟路由的ID号,两个节点设置必须一样,可选IP最后一段使用,相同的VRID为一个组,他将决定多播的MAC地址
    nopreempt # 非抢占模式，当主down时，备接管，主恢复，不自动接管
    priority ${PRIORITY2} # 节点优先级，值范围0～254，MASTER要比BACKUP高
    advert_int 1 # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒
    # 设置验证信息，两个节点必须一致
    authentication {
        auth_type PASS
        auth_pass ${AUTH_PASS}
    }
    # 虚拟IP，两个节点设置必须一样。可以设置多个，一行写一个
    virtual_ipaddress {
        ${IP_MASK2}
    }
    # nginx存活状态检测脚本
    track_script {
        chk_nginx
    }
    # Keepalived进入MASTER状态执行脚本
    notify_master /etc/keepalived/to_master.sh
    # Keepalived进入BACKUP状态执行脚本
    notify_backup /etc/keepalived/to_backup.sh
    # Keepalived进入FAULT状态执行脚本
    notify_fault /etc/keepalived/to_fault.sh
    smtp_alert
}
